image: registry.ritc.jp/ricos/machine_learning/siml:0.2.8

default:
  before_script:
    - poetry config virtualenvs.create false
    - poetry build
    - python3.9 -m pip uninstall -y femio pysiml
    - python3.9 -m pip install femio --pre
    - python3.9 -m pip install dist/pysiml-*.whl  # Only install root project, not dependencies
    # - poetry install

stages:
  - docker
  - preprocess
  - test
  - deploy

# docker:
#   image: docker:latest
#   stage: docker
#   inherit:
#     default: false
#   services:
#     - docker:dind
#   script:
#     - apk add make
#     - cd docker && make push key=${RICOS_PYPI_KEY}
#   tags:
#     - docker
#     - gpu
#   only:
#     - master

preprocess:
  stage: preprocess
  script:
    - python3.9 tests/preprocess.py
  artifacts:
    paths:
      - tests/data
    expire_in: 180min

generate_heat_steady:
  stage: preprocess
  script:
    - python3.9 tests/data/heat_steady/generate_data.py tests/data/heat_steady
  artifacts:
    paths:
      - tests/data/heat_steady
    expire_in: 180min

autopep8:
  stage: preprocess
  script:
    - python3.9 -m autopep8 --diff --exit-code $(find siml tests -name "*.py")
  allow_failure: true

.test:
  stage: test
  tags:
    - avx

test_gpu_networks:
  extends: .test
  script:
    - python3.9 -m pytest tests/gpu/test_networks_gpu.py --capture=no
  tags:
    - multi-gpu
    - avx

test_gpu:
  extends: .test
  script:
    - python3.9 -m pytest tests/gpu/test_optimize_gpu.py tests/gpu/test_trainer_gpu.py tests/gpu/test_inferer_gpu.py --capture=no
  tags:
    - multi-gpu
    - avx

test_gpu_parallel:
  extends: .test
  script:
    - python3.9 -m pytest tests/gpu/test_trainer_gpu_parallel.py --capture=no
  allow_failure: true
  tags:
    - multi-gpu
    - avx

test_network:
  extends: .test
  script: python3.9 -m pytest tests/test_network.py --capture=no

test_networks:
  extends: .test
  script: python3.9 -m pytest tests/test_networks.py --capture=no

test_geo:
  extends: .test
  script: python3.9 -m pytest tests/test_geo.py --capture=no

test_iso_gcn:
  extends: .test
  script: python3.9 -m pytest tests/test_iso_gcn.py tests/test_boundary.py --capture=no

test_penn:
  extends: .test
  script: python3.9 -m pytest tests/test_penn.py --capture=no

test_optimize:
  extends: .test
  script: python3.9 -m pytest tests/test_optimize.py --capture=no

test_study:
  extends: .test
  script: python3.9 -m pytest tests/test_study.py --capture=no

test_trainer:
  extends: .test
  script: python3.9 -m pytest tests/test_trainer.py --capture=no

test_trainer_wo_pyg:
  extends: .test
  script:
    - python3.9 -m pip uninstall torch-geometric -y
    - python3.9 -m pytest tests/test_trainer.py --capture=no -k test_whole_process

test_trainer_long:
  extends: .test
  script: python3.9 -m pytest tests/test_trainer_long.py --capture=no

test_other:
  extends: .test
  script:
    - python3.9 -m pytest tests/test_prepost.py tests/test_setting.py tests/test_util.py tests/test_inferer.py tests/test_activations.py tests/test_sparse.py tests/test_projection.py --capture=no

test_group:
  extends: .test
  script:
    - python3.9 -m pytest tests/test_groups.py --capture=no
  tags:
    - avx
    - gpu

pages:
  stage: deploy
  script:
    - poetry build
    - python3.9 -m pip install dist/pysiml-*.whl
    - python3.9 -m pip install -r sphinx/requirements.txt
    - sphinx-apidoc -f -o ./sphinx siml
    - sphinx-build ./sphinx ./docs
    - cp -r docs public
    - mv dist/*.whl public/
  artifacts:
    paths:
      - public
      - docs
  tags:
    - avx
  only:
    - master
    - develop
    - fix_sphinx


.deploy:wheel:
  stage: deploy
  script:
    - python3.9 -m pip install --upgrade pip
    - poetry version $VERSION
    - poetry config repositories.ricos https://pypi.ritc.jp
    - poetry build -f wheel
    - poetry publish --username ricos --password ${RICOS_PYPI_KEY} -r ricos --no-ansi -n -v
    - poetry publish --username __token__ --password ${PYPI_ORG_TOKEN} --no-ansi -n -v
  retry: 2

deploy:wheel:master:
  extends: .deploy:wheel
  before_script:
    - export VERSION=$(grep "^version" pyproject.toml | grep -o "[0-9]\.[0-9]\.[0-9]").dev$(date +"%Y%m%d%H%M")
  only:
    - master
    - develop

deploy:wheel:tag:
  extends: .deploy:wheel
  before_script:
    - export VERSION=$CI_COMMIT_REF_NAME
  only:
    - tags
